// for compile
// install latest protoc from
// https://github.com/protocolbuffers/protobuf/releases
//
// or install old from repository
// sudo apt update && sudo apt install protobuf-compiler
//
// intall golang plugin
// go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
//
// then run from progect root folder
// protoc --proto_path=./tele --go_out=./tele --go_opt=paths=source_relative tele.proto
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.1
// source: tele.proto

package tele

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CmdReplay int32

const (
	CmdReplay_nothing  CmdReplay = 0
	CmdReplay_accepted CmdReplay = 1
	CmdReplay_done     CmdReplay = 2
	CmdReplay_busy     CmdReplay = 3
	CmdReplay_error    CmdReplay = 4
)

// Enum value maps for CmdReplay.
var (
	CmdReplay_name = map[int32]string{
		0: "nothing",
		1: "accepted",
		2: "done",
		3: "busy",
		4: "error",
	}
	CmdReplay_value = map[string]int32{
		"nothing":  0,
		"accepted": 1,
		"done":     2,
		"busy":     3,
		"error":    4,
	}
)

func (x CmdReplay) Enum() *CmdReplay {
	p := new(CmdReplay)
	*p = x
	return p
}

func (x CmdReplay) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CmdReplay) Descriptor() protoreflect.EnumDescriptor {
	return file_tele_proto_enumTypes[0].Descriptor()
}

func (CmdReplay) Type() protoreflect.EnumType {
	return &file_tele_proto_enumTypes[0]
}

func (x CmdReplay) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CmdReplay.Descriptor instead.
func (CmdReplay) EnumDescriptor() ([]byte, []int) {
	return file_tele_proto_rawDescGZIP(), []int{0}
}

type CookReplay int32

const (
	CookReplay_cookNothing      CookReplay = 0
	CookReplay_cookStart        CookReplay = 1
	CookReplay_cookFinish       CookReplay = 2
	CookReplay_cookInaccessible CookReplay = 3
	CookReplay_cookOverdraft    CookReplay = 4
	CookReplay_cookError        CookReplay = 5
	CookReplay_vmcbusy          CookReplay = 6
	CookReplay_waitPay          CookReplay = 7
)

// Enum value maps for CookReplay.
var (
	CookReplay_name = map[int32]string{
		0: "cookNothing",
		1: "cookStart",
		2: "cookFinish",
		3: "cookInaccessible",
		4: "cookOverdraft",
		5: "cookError",
		6: "vmcbusy",
		7: "waitPay",
	}
	CookReplay_value = map[string]int32{
		"cookNothing":      0,
		"cookStart":        1,
		"cookFinish":       2,
		"cookInaccessible": 3,
		"cookOverdraft":    4,
		"cookError":        5,
		"vmcbusy":          6,
		"waitPay":          7,
	}
)

func (x CookReplay) Enum() *CookReplay {
	p := new(CookReplay)
	*p = x
	return p
}

func (x CookReplay) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CookReplay) Descriptor() protoreflect.EnumDescriptor {
	return file_tele_proto_enumTypes[1].Descriptor()
}

func (CookReplay) Type() protoreflect.EnumType {
	return &file_tele_proto_enumTypes[1]
}

func (x CookReplay) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CookReplay.Descriptor instead.
func (CookReplay) EnumDescriptor() ([]byte, []int) {
	return file_tele_proto_rawDescGZIP(), []int{1}
}

// ---------------------------------------------------------------------- new
type State int32

const (
	State_Invalid                   State = 0
	State_Boot                      State = 1
	State_Nominal                   State = 2
	State_Client                    State = 3
	State_Broken                    State = 4
	State_Service                   State = 5
	State_Lock                      State = 6
	State_Process                   State = 7
	State_TemperatureProblem        State = 8
	State_Shutdown                  State = 9
	State_RemoteControl             State = 10
	State_WaitingForExternalPayment State = 11
	State_RequestState              State = 64
)

// Enum value maps for State.
var (
	State_name = map[int32]string{
		0:  "Invalid",
		1:  "Boot",
		2:  "Nominal",
		3:  "Client",
		4:  "Broken",
		5:  "Service",
		6:  "Lock",
		7:  "Process",
		8:  "TemperatureProblem",
		9:  "Shutdown",
		10: "RemoteControl",
		11: "WaitingForExternalPayment",
		64: "RequestState",
	}
	State_value = map[string]int32{
		"Invalid":                   0,
		"Boot":                      1,
		"Nominal":                   2,
		"Client":                    3,
		"Broken":                    4,
		"Service":                   5,
		"Lock":                      6,
		"Process":                   7,
		"TemperatureProblem":        8,
		"Shutdown":                  9,
		"RemoteControl":             10,
		"WaitingForExternalPayment": 11,
		"RequestState":              64,
	}
)

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}

func (x State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State) Descriptor() protoreflect.EnumDescriptor {
	return file_tele_proto_enumTypes[2].Descriptor()
}

func (State) Type() protoreflect.EnumType {
	return &file_tele_proto_enumTypes[2]
}

func (x State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use State.Descriptor instead.
func (State) EnumDescriptor() ([]byte, []int) {
	return file_tele_proto_rawDescGZIP(), []int{2}
}

type PaymentMethod int32

const (
	PaymentMethod_Nothing  PaymentMethod = 0
	PaymentMethod_Cash     PaymentMethod = 1
	PaymentMethod_Cashless PaymentMethod = 2
	PaymentMethod_Gift     PaymentMethod = 3
	PaymentMethod_Balance  PaymentMethod = 4
)

// Enum value maps for PaymentMethod.
var (
	PaymentMethod_name = map[int32]string{
		0: "Nothing",
		1: "Cash",
		2: "Cashless",
		3: "Gift",
		4: "Balance",
	}
	PaymentMethod_value = map[string]int32{
		"Nothing":  0,
		"Cash":     1,
		"Cashless": 2,
		"Gift":     3,
		"Balance":  4,
	}
)

func (x PaymentMethod) Enum() *PaymentMethod {
	p := new(PaymentMethod)
	*p = x
	return p
}

func (x PaymentMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_tele_proto_enumTypes[3].Descriptor()
}

func (PaymentMethod) Type() protoreflect.EnumType {
	return &file_tele_proto_enumTypes[3]
}

func (x PaymentMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentMethod.Descriptor instead.
func (PaymentMethod) EnumDescriptor() ([]byte, []int) {
	return file_tele_proto_rawDescGZIP(), []int{3}
}

type OwnerType int32

const (
	OwnerType_noOwnerType    OwnerType = 0
	OwnerType_telegramUser   OwnerType = 1
	OwnerType_qrCashLessUser OwnerType = 2
)

// Enum value maps for OwnerType.
var (
	OwnerType_name = map[int32]string{
		0: "noOwnerType",
		1: "telegramUser",
		2: "qrCashLessUser",
	}
	OwnerType_value = map[string]int32{
		"noOwnerType":    0,
		"telegramUser":   1,
		"qrCashLessUser": 2,
	}
)

func (x OwnerType) Enum() *OwnerType {
	p := new(OwnerType)
	*p = x
	return p
}

func (x OwnerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OwnerType) Descriptor() protoreflect.EnumDescriptor {
	return file_tele_proto_enumTypes[4].Descriptor()
}

func (OwnerType) Type() protoreflect.EnumType {
	return &file_tele_proto_enumTypes[4]
}

func (x OwnerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OwnerType.Descriptor instead.
func (OwnerType) EnumDescriptor() ([]byte, []int) {
	return file_tele_proto_rawDescGZIP(), []int{4}
}

type OrderStatus int32

const (
	OrderStatus_noStatus              OrderStatus = 0
	OrderStatus_executionStart        OrderStatus = 1
	OrderStatus_complete              OrderStatus = 2
	OrderStatus_overdraft             OrderStatus = 3
	OrderStatus_executionInaccessible OrderStatus = 4
	OrderStatus_orderError            OrderStatus = 5
	OrderStatus_robotIsBusy           OrderStatus = 6
	OrderStatus_waitingForPayment     OrderStatus = 7
	OrderStatus_cancel                OrderStatus = 8
	OrderStatus_doSelected            OrderStatus = 64
	OrderStatus_doTransferred         OrderStatus = 65
)

// Enum value maps for OrderStatus.
var (
	OrderStatus_name = map[int32]string{
		0:  "noStatus",
		1:  "executionStart",
		2:  "complete",
		3:  "overdraft",
		4:  "executionInaccessible",
		5:  "orderError",
		6:  "robotIsBusy",
		7:  "waitingForPayment",
		8:  "cancel",
		64: "doSelected",
		65: "doTransferred",
	}
	OrderStatus_value = map[string]int32{
		"noStatus":              0,
		"executionStart":        1,
		"complete":              2,
		"overdraft":             3,
		"executionInaccessible": 4,
		"orderError":            5,
		"robotIsBusy":           6,
		"waitingForPayment":     7,
		"cancel":                8,
		"doSelected":            64,
		"doTransferred":         65,
	}
)

func (x OrderStatus) Enum() *OrderStatus {
	p := new(OrderStatus)
	*p = x
	return p
}

func (x OrderStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_tele_proto_enumTypes[5].Descriptor()
}

func (OrderStatus) Type() protoreflect.EnumType {
	return &file_tele_proto_enumTypes[5]
}

func (x OrderStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderStatus.Descriptor instead.
func (OrderStatus) EnumDescriptor() ([]byte, []int) {
	return file_tele_proto_rawDescGZIP(), []int{5}
}

type MessageType int32

const (
	MessageType_invalid        MessageType = 0
	MessageType_showQR         MessageType = 1
	MessageType_makeOrder      MessageType = 2
	MessageType_executeCommand MessageType = 3
	MessageType_reportStock    MessageType = 4
	MessageType_reportState    MessageType = 5
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0: "invalid",
		1: "showQR",
		2: "makeOrder",
		3: "executeCommand",
		4: "reportStock",
		5: "reportState",
	}
	MessageType_value = map[string]int32{
		"invalid":        0,
		"showQR":         1,
		"makeOrder":      2,
		"executeCommand": 3,
		"reportStock":    4,
		"reportState":    5,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_tele_proto_enumTypes[6].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_tele_proto_enumTypes[6]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_tele_proto_rawDescGZIP(), []int{6}
}

type ShowQR_QRType int32

const (
	ShowQR_invalid        ShowQR_QRType = 0
	ShowQR_receipt        ShowQR_QRType = 1
	ShowQR_order          ShowQR_QRType = 2
	ShowQR_errorOverdraft ShowQR_QRType = 3
	ShowQR_error          ShowQR_QRType = 4
)

// Enum value maps for ShowQR_QRType.
var (
	ShowQR_QRType_name = map[int32]string{
		0: "invalid",
		1: "receipt",
		2: "order",
		3: "errorOverdraft",
		4: "error",
	}
	ShowQR_QRType_value = map[string]int32{
		"invalid":        0,
		"receipt":        1,
		"order":          2,
		"errorOverdraft": 3,
		"error":          4,
	}
)

func (x ShowQR_QRType) Enum() *ShowQR_QRType {
	p := new(ShowQR_QRType)
	*p = x
	return p
}

func (x ShowQR_QRType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShowQR_QRType) Descriptor() protoreflect.EnumDescriptor {
	return file_tele_proto_enumTypes[7].Descriptor()
}

func (ShowQR_QRType) Type() protoreflect.EnumType {
	return &file_tele_proto_enumTypes[7]
}

func (x ShowQR_QRType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShowQR_QRType.Descriptor instead.
func (ShowQR_QRType) EnumDescriptor() ([]byte, []int) {
	return file_tele_proto_rawDescGZIP(), []int{7, 0}
}

type Inventory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stocks []*Inventory_StockItem `protobuf:"bytes,1,rep,name=stocks,proto3" json:"stocks,omitempty"`
}

func (x *Inventory) Reset() {
	*x = Inventory{}
	mi := &file_tele_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Inventory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inventory) ProtoMessage() {}

func (x *Inventory) ProtoReflect() protoreflect.Message {
	mi := &file_tele_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inventory.ProtoReflect.Descriptor instead.
func (*Inventory) Descriptor() ([]byte, []int) {
	return file_tele_proto_rawDescGZIP(), []int{0}
}

func (x *Inventory) GetStocks() []*Inventory_StockItem {
	if x != nil {
		return x.Stocks
	}
	return nil
}

type Telemetry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VmId         int32                  `protobuf:"varint,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	Time         int64                  `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Error        *Telemetry_Error       `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	Inventory    *Inventory             `protobuf:"bytes,4,opt,name=inventory,proto3" json:"inventory,omitempty"`
	MoneyCashbox *Telemetry_Money       `protobuf:"bytes,5,opt,name=money_cashbox,json=moneyCashbox,proto3" json:"money_cashbox,omitempty"`
	Transaction  *Telemetry_Transaction `protobuf:"bytes,6,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Stat         *Telemetry_Stat        `protobuf:"bytes,7,opt,name=stat,proto3" json:"stat,omitempty"`
	MoneySave    *Telemetry_Money       `protobuf:"bytes,8,opt,name=money_save,json=moneySave,proto3" json:"money_save,omitempty"`
	MoneyChange  *Telemetry_Money       `protobuf:"bytes,9,opt,name=money_change,json=moneyChange,proto3" json:"money_change,omitempty"`
	AtService    bool                   `protobuf:"varint,16,opt,name=at_service,json=atService,proto3" json:"at_service,omitempty"` //  string build_version = 17;
}

func (x *Telemetry) Reset() {
	*x = Telemetry{}
	mi := &file_tele_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Telemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Telemetry) ProtoMessage() {}

func (x *Telemetry) ProtoReflect() protoreflect.Message {
	mi := &file_tele_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Telemetry.ProtoReflect.Descriptor instead.
func (*Telemetry) Descriptor() ([]byte, []int) {
	return file_tele_proto_rawDescGZIP(), []int{1}
}

func (x *Telemetry) GetVmId() int32 {
	if x != nil {
		return x.VmId
	}
	return 0
}

func (x *Telemetry) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Telemetry) GetError() *Telemetry_Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *Telemetry) GetInventory() *Inventory {
	if x != nil {
		return x.Inventory
	}
	return nil
}

func (x *Telemetry) GetMoneyCashbox() *Telemetry_Money {
	if x != nil {
		return x.MoneyCashbox
	}
	return nil
}

func (x *Telemetry) GetTransaction() *Telemetry_Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *Telemetry) GetStat() *Telemetry_Stat {
	if x != nil {
		return x.Stat
	}
	return nil
}

func (x *Telemetry) GetMoneySave() *Telemetry_Money {
	if x != nil {
		return x.MoneySave
	}
	return nil
}

func (x *Telemetry) GetMoneyChange() *Telemetry_Money {
	if x != nil {
		return x.MoneyChange
	}
	return nil
}

func (x *Telemetry) GetAtService() bool {
	if x != nil {
		return x.AtService
	}
	return false
}

type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Executer int64 `protobuf:"varint,5,opt,name=executer,proto3" json:"executer,omitempty"`
	Lock     bool  `protobuf:"varint,6,opt,name=lock,proto3" json:"lock,omitempty"`
	// Types that are assignable to Task:
	//
	//	*Command_Report
	//	*Command_GetState
	//	*Command_Exec
	//	*Command_SetInventory
	//	*Command_SetConfig
	//	*Command_Stop
	//	*Command_Show_QR
	//	*Command_ValidateCode
	//	*Command_Cook
	Task isCommand_Task `protobuf_oneof:"task"`
}

func (x *Command) Reset() {
	*x = Command{}
	mi := &file_tele_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_tele_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_tele_proto_rawDescGZIP(), []int{2}
}

func (x *Command) GetExecuter() int64 {
	if x != nil {
		return x.Executer
	}
	return 0
}

func (x *Command) GetLock() bool {
	if x != nil {
		return x.Lock
	}
	return false
}

func (m *Command) GetTask() isCommand_Task {
	if m != nil {
		return m.Task
	}
	return nil
}

func (x *Command) GetReport() *Command_ArgReport {
	if x, ok := x.GetTask().(*Command_Report); ok {
		return x.Report
	}
	return nil
}

func (x *Command) GetGetState() *Command_ArgGetState {
	if x, ok := x.GetTask().(*Command_GetState); ok {
		return x.GetState
	}
	return nil
}

func (x *Command) GetExec() *Command_ArgExec {
	if x, ok := x.GetTask().(*Command_Exec); ok {
		return x.Exec
	}
	return nil
}

func (x *Command) GetSetInventory() *Command_ArgSetInventory {
	if x, ok := x.GetTask().(*Command_SetInventory); ok {
		return x.SetInventory
	}
	return nil
}

func (x *Command) GetSetConfig() *Command_ArgSetConfig {
	if x, ok := x.GetTask().(*Command_SetConfig); ok {
		return x.SetConfig
	}
	return nil
}

func (x *Command) GetStop() *Command_ArgSendStatus {
	if x, ok := x.GetTask().(*Command_Stop); ok {
		return x.Stop
	}
	return nil
}

func (x *Command) GetShow_QR() *Command_ArgShowQR {
	if x, ok := x.GetTask().(*Command_Show_QR); ok {
		return x.Show_QR
	}
	return nil
}

func (x *Command) GetValidateCode() *Command_ArgValidateCode {
	if x, ok := x.GetTask().(*Command_ValidateCode); ok {
		return x.ValidateCode
	}
	return nil
}

func (x *Command) GetCook() *Command_ArgCook {
	if x, ok := x.GetTask().(*Command_Cook); ok {
		return x.Cook
	}
	return nil
}

type isCommand_Task interface {
	isCommand_Task()
}

type Command_Report struct {
	Report *Command_ArgReport `protobuf:"bytes,16,opt,name=report,proto3,oneof"`
}

type Command_GetState struct {
	GetState *Command_ArgGetState `protobuf:"bytes,17,opt,name=getState,proto3,oneof"`
}

type Command_Exec struct {
	Exec *Command_ArgExec `protobuf:"bytes,18,opt,name=exec,proto3,oneof"`
}

type Command_SetInventory struct {
	SetInventory *Command_ArgSetInventory `protobuf:"bytes,19,opt,name=set_inventory,json=setInventory,proto3,oneof"`
}

type Command_SetConfig struct {
	SetConfig *Command_ArgSetConfig `protobuf:"bytes,20,opt,name=set_config,json=setConfig,proto3,oneof"`
}

type Command_Stop struct {
	Stop *Command_ArgSendStatus `protobuf:"bytes,21,opt,name=stop,proto3,oneof"`
}

type Command_Show_QR struct {
	Show_QR *Command_ArgShowQR `protobuf:"bytes,22,opt,name=show_QR,json=showQR,proto3,oneof"`
}

type Command_ValidateCode struct {
	ValidateCode *Command_ArgValidateCode `protobuf:"bytes,23,opt,name=validate_code,json=validateCode,proto3,oneof"`
}

type Command_Cook struct {
	Cook *Command_ArgCook `protobuf:"bytes,24,opt,name=cook,proto3,oneof"`
}

func (*Command_Report) isCommand_Task() {}

func (*Command_GetState) isCommand_Task() {}

func (*Command_Exec) isCommand_Task() {}

func (*Command_SetInventory) isCommand_Task() {}

func (*Command_SetConfig) isCommand_Task() {}

func (*Command_Stop) isCommand_Task() {}

func (*Command_Show_QR) isCommand_Task() {}

func (*Command_ValidateCode) isCommand_Task() {}

func (*Command_Cook) isCommand_Task() {}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uint32 command_id = 1;
	Error          string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Data           string     `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Executer       int64      `protobuf:"varint,4,opt,name=executer,proto3" json:"executer,omitempty"`
	CmdReplay      CmdReplay  `protobuf:"varint,5,opt,name=cmd_replay,json=cmdReplay,proto3,enum=CmdReplay" json:"cmd_replay,omitempty"`
	CookReplay     CookReplay `protobuf:"varint,6,opt,name=cook_replay,json=cookReplay,proto3,enum=CookReplay" json:"cook_replay,omitempty"`
	ValidateReplay uint32     `protobuf:"varint,7,opt,name=validateReplay,proto3" json:"validateReplay,omitempty"`
	INTERNALTopic  string     `protobuf:"bytes,2048,opt,name=INTERNAL_topic,json=INTERNALTopic,proto3" json:"INTERNAL_topic,omitempty"` // convenience
}

func (x *Response) Reset() {
	*x = Response{}
	mi := &file_tele_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_tele_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_tele_proto_rawDescGZIP(), []int{3}
}

func (x *Response) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *Response) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *Response) GetExecuter() int64 {
	if x != nil {
		return x.Executer
	}
	return 0
}

func (x *Response) GetCmdReplay() CmdReplay {
	if x != nil {
		return x.CmdReplay
	}
	return CmdReplay_nothing
}

func (x *Response) GetCookReplay() CookReplay {
	if x != nil {
		return x.CookReplay
	}
	return CookReplay_cookNothing
}

func (x *Response) GetValidateReplay() uint32 {
	if x != nil {
		return x.ValidateReplay
	}
	return 0
}

func (x *Response) GetINTERNALTopic() string {
	if x != nil {
		return x.INTERNALTopic
	}
	return ""
}

type FromRoboMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State        State         `protobuf:"varint,1,opt,name=state,proto3,enum=State" json:"state,omitempty"`
	RoboTime     int64         `protobuf:"varint,2,opt,name=roboTime,proto3" json:"roboTime,omitempty"`
	Order        *Order        `protobuf:"bytes,3,opt,name=Order,proto3" json:"Order,omitempty"`
	Err          *Err          `protobuf:"bytes,4,opt,name=err,proto3" json:"err,omitempty"`
	RoboHardware *RoboHardware `protobuf:"bytes,5,opt,name=RoboHardware,proto3" json:"RoboHardware,omitempty"`
	Stock        *Stock        `protobuf:"bytes,6,opt,name=Stock,proto3" json:"Stock,omitempty"`
}

func (x *FromRoboMessage) Reset() {
	*x = FromRoboMessage{}
	mi := &file_tele_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FromRoboMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromRoboMessage) ProtoMessage() {}

func (x *FromRoboMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tele_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromRoboMessage.ProtoReflect.Descriptor instead.
func (*FromRoboMessage) Descriptor() ([]byte, []int) {
	return file_tele_proto_rawDescGZIP(), []int{4}
}

func (x *FromRoboMessage) GetState() State {
	if x != nil {
		return x.State
	}
	return State_Invalid
}

func (x *FromRoboMessage) GetRoboTime() int64 {
	if x != nil {
		return x.RoboTime
	}
	return 0
}

func (x *FromRoboMessage) GetOrder() *Order {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *FromRoboMessage) GetErr() *Err {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *FromRoboMessage) GetRoboHardware() *RoboHardware {
	if x != nil {
		return x.RoboHardware
	}
	return nil
}

func (x *FromRoboMessage) GetStock() *Stock {
	if x != nil {
		return x.Stock
	}
	return nil
}

type Stock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stocks []*Stock_StockItem `protobuf:"bytes,1,rep,name=stocks,proto3" json:"stocks,omitempty"`
}

func (x *Stock) Reset() {
	*x = Stock{}
	mi := &file_tele_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Stock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stock) ProtoMessage() {}

func (x *Stock) ProtoReflect() protoreflect.Message {
	mi := &file_tele_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stock.ProtoReflect.Descriptor instead.
func (*Stock) Descriptor() ([]byte, []int) {
	return file_tele_proto_rawDescGZIP(), []int{5}
}

func (x *Stock) GetStocks() []*Stock_StockItem {
	if x != nil {
		return x.Stocks
	}
	return nil
}

type Err struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Err) Reset() {
	*x = Err{}
	mi := &file_tele_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Err) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Err) ProtoMessage() {}

func (x *Err) ProtoReflect() protoreflect.Message {
	mi := &file_tele_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Err.ProtoReflect.Descriptor instead.
func (*Err) Descriptor() ([]byte, []int) {
	return file_tele_proto_rawDescGZIP(), []int{6}
}

func (x *Err) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Err) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ShowQR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QrType  ShowQR_QRType `protobuf:"varint,1,opt,name=qrType,proto3,enum=ShowQR_QRType" json:"qrType,omitempty"`
	QrText  string        `protobuf:"bytes,2,opt,name=qrText,proto3" json:"qrText,omitempty"`
	DataStr string        `protobuf:"bytes,3,opt,name=dataStr,proto3" json:"dataStr,omitempty"`
	DataInt int32         `protobuf:"varint,4,opt,name=dataInt,proto3" json:"dataInt,omitempty"`
	PayerId int64         `protobuf:"varint,5,opt,name=payerId,proto3" json:"payerId,omitempty"`
	OrderId string        `protobuf:"bytes,6,opt,name=orderId,proto3" json:"orderId,omitempty"`
	Amount  int32         `protobuf:"varint,7,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *ShowQR) Reset() {
	*x = ShowQR{}
	mi := &file_tele_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShowQR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowQR) ProtoMessage() {}

func (x *ShowQR) ProtoReflect() protoreflect.Message {
	mi := &file_tele_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowQR.ProtoReflect.Descriptor instead.
func (*ShowQR) Descriptor() ([]byte, []int) {
	return file_tele_proto_rawDescGZIP(), []int{7}
}

func (x *ShowQR) GetQrType() ShowQR_QRType {
	if x != nil {
		return x.QrType
	}
	return ShowQR_invalid
}

func (x *ShowQR) GetQrText() string {
	if x != nil {
		return x.QrText
	}
	return ""
}

func (x *ShowQR) GetDataStr() string {
	if x != nil {
		return x.DataStr
	}
	return ""
}

func (x *ShowQR) GetDataInt() int32 {
	if x != nil {
		return x.DataInt
	}
	return 0
}

func (x *ShowQR) GetPayerId() int64 {
	if x != nil {
		return x.PayerId
	}
	return 0
}

func (x *ShowQR) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *ShowQR) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type ToRoboMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        MessageType `protobuf:"varint,1,opt,name=cmd,proto3,enum=MessageType" json:"cmd,omitempty"`
	ServerTime int64       `protobuf:"varint,2,opt,name=serverTime,proto3" json:"serverTime,omitempty"`
	MakeOrder  *Order      `protobuf:"bytes,3,opt,name=makeOrder,proto3" json:"makeOrder,omitempty"`
	ShowQR     *ShowQR     `protobuf:"bytes,4,opt,name=showQR,proto3" json:"showQR,omitempty"`
	Command    string      `protobuf:"bytes,5,opt,name=command,proto3" json:"command,omitempty"`
}

func (x *ToRoboMessage) Reset() {
	*x = ToRoboMessage{}
	mi := &file_tele_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToRoboMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToRoboMessage) ProtoMessage() {}

func (x *ToRoboMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tele_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToRoboMessage.ProtoReflect.Descriptor instead.
func (*ToRoboMessage) Descriptor() ([]byte, []int) {
	return file_tele_proto_rawDescGZIP(), []int{8}
}

func (x *ToRoboMessage) GetCmd() MessageType {
	if x != nil {
		return x.Cmd
	}
	return MessageType_invalid
}

func (x *ToRoboMessage) GetServerTime() int64 {
	if x != nil {
		return x.ServerTime
	}
	return 0
}

func (x *ToRoboMessage) GetMakeOrder() *Order {
	if x != nil {
		return x.MakeOrder
	}
	return nil
}

func (x *ToRoboMessage) GetShowQR() *ShowQR {
	if x != nil {
		return x.ShowQR
	}
	return nil
}

func (x *ToRoboMessage) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

type RoboHardware struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwVersion   string `protobuf:"bytes,1,opt,name=SwVersion,proto3" json:"SwVersion,omitempty"`
	Temperature int32  `protobuf:"varint,3,opt,name=temperature,proto3" json:"temperature,omitempty"`
}

func (x *RoboHardware) Reset() {
	*x = RoboHardware{}
	mi := &file_tele_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoboHardware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoboHardware) ProtoMessage() {}

func (x *RoboHardware) ProtoReflect() protoreflect.Message {
	mi := &file_tele_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoboHardware.ProtoReflect.Descriptor instead.
func (*RoboHardware) Descriptor() ([]byte, []int) {
	return file_tele_proto_rawDescGZIP(), []int{9}
}

func (x *RoboHardware) GetSwVersion() string {
	if x != nil {
		return x.SwVersion
	}
	return ""
}

func (x *RoboHardware) GetTemperature() int32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MenuCode        string        `protobuf:"bytes,1,opt,name=menuCode,proto3" json:"menuCode,omitempty"`
	Cream           []byte        `protobuf:"bytes,2,opt,name=cream,proto3" json:"cream,omitempty"`    // default = 0
	Sugar           []byte        `protobuf:"bytes,3,opt,name=sugar,proto3" json:"sugar,omitempty"`    // default = 0
	Amount          uint32        `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"` // цена в копейках
	OrderStatus     OrderStatus   `protobuf:"varint,6,opt,name=orderStatus,proto3,enum=OrderStatus" json:"orderStatus,omitempty"`
	PaymentMethod   PaymentMethod `protobuf:"varint,7,opt,name=paymentMethod,proto3,enum=PaymentMethod" json:"paymentMethod,omitempty"`
	OwnerInt        int64         `protobuf:"varint,8,opt,name=ownerInt,proto3" json:"ownerInt,omitempty"` // id клиента
	OwnerStr        string        `protobuf:"bytes,9,opt,name=ownerStr,proto3" json:"ownerStr,omitempty"`  //
	OwnerType       OwnerType     `protobuf:"varint,10,opt,name=ownerType,proto3,enum=OwnerType" json:"ownerType,omitempty"`
	RedirectDueDate int64         `protobuf:"varint,11,opt,name=redirectDueDate,proto3" json:"redirectDueDate,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	mi := &file_tele_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_tele_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_tele_proto_rawDescGZIP(), []int{10}
}

func (x *Order) GetMenuCode() string {
	if x != nil {
		return x.MenuCode
	}
	return ""
}

func (x *Order) GetCream() []byte {
	if x != nil {
		return x.Cream
	}
	return nil
}

func (x *Order) GetSugar() []byte {
	if x != nil {
		return x.Sugar
	}
	return nil
}

func (x *Order) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Order) GetOrderStatus() OrderStatus {
	if x != nil {
		return x.OrderStatus
	}
	return OrderStatus_noStatus
}

func (x *Order) GetPaymentMethod() PaymentMethod {
	if x != nil {
		return x.PaymentMethod
	}
	return PaymentMethod_Nothing
}

func (x *Order) GetOwnerInt() int64 {
	if x != nil {
		return x.OwnerInt
	}
	return 0
}

func (x *Order) GetOwnerStr() string {
	if x != nil {
		return x.OwnerStr
	}
	return ""
}

func (x *Order) GetOwnerType() OwnerType {
	if x != nil {
		return x.OwnerType
	}
	return OwnerType_noOwnerType
}

func (x *Order) GetRedirectDueDate() int64 {
	if x != nil {
		return x.RedirectDueDate
	}
	return 0
}

type Inventory_StockItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   uint32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Value  int32   `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	Name   string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Hopper int32   `protobuf:"varint,4,opt,name=hopper,proto3" json:"hopper,omitempty"`
	Valuef float32 `protobuf:"fixed32,5,opt,name=valuef,proto3" json:"valuef,omitempty"`
}

func (x *Inventory_StockItem) Reset() {
	*x = Inventory_StockItem{}
	mi := &file_tele_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Inventory_StockItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inventory_StockItem) ProtoMessage() {}

func (x *Inventory_StockItem) ProtoReflect() protoreflect.Message {
	mi := &file_tele_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inventory_StockItem.ProtoReflect.Descriptor instead.
func (*Inventory_StockItem) Descriptor() ([]byte, []int) {
	return file_tele_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Inventory_StockItem) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Inventory_StockItem) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Inventory_StockItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Inventory_StockItem) GetHopper() int32 {
	if x != nil {
		return x.Hopper
	}
	return 0
}

func (x *Inventory_StockItem) GetValuef() float32 {
	if x != nil {
		return x.Valuef
	}
	return 0
}

type Telemetry_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Count   uint32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *Telemetry_Error) Reset() {
	*x = Telemetry_Error{}
	mi := &file_tele_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Telemetry_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Telemetry_Error) ProtoMessage() {}

func (x *Telemetry_Error) ProtoReflect() protoreflect.Message {
	mi := &file_tele_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Telemetry_Error.ProtoReflect.Descriptor instead.
func (*Telemetry_Error) Descriptor() ([]byte, []int) {
	return file_tele_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Telemetry_Error) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Telemetry_Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Telemetry_Error) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type Telemetry_Money struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalBills uint32            `protobuf:"varint,1,opt,name=total_bills,json=totalBills,proto3" json:"total_bills,omitempty"`
	TotalCoins uint32            `protobuf:"varint,2,opt,name=total_coins,json=totalCoins,proto3" json:"total_coins,omitempty"`
	Bills      map[uint32]uint32 `protobuf:"bytes,3,rep,name=bills,proto3" json:"bills,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Coins      map[uint32]uint32 `protobuf:"bytes,4,rep,name=coins,proto3" json:"coins,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *Telemetry_Money) Reset() {
	*x = Telemetry_Money{}
	mi := &file_tele_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Telemetry_Money) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Telemetry_Money) ProtoMessage() {}

func (x *Telemetry_Money) ProtoReflect() protoreflect.Message {
	mi := &file_tele_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Telemetry_Money.ProtoReflect.Descriptor instead.
func (*Telemetry_Money) Descriptor() ([]byte, []int) {
	return file_tele_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Telemetry_Money) GetTotalBills() uint32 {
	if x != nil {
		return x.TotalBills
	}
	return 0
}

func (x *Telemetry_Money) GetTotalCoins() uint32 {
	if x != nil {
		return x.TotalCoins
	}
	return 0
}

func (x *Telemetry_Money) GetBills() map[uint32]uint32 {
	if x != nil {
		return x.Bills
	}
	return nil
}

func (x *Telemetry_Money) GetCoins() map[uint32]uint32 {
	if x != nil {
		return x.Coins
	}
	return nil
}

type Telemetry_Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code          string        `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Options       []int32       `protobuf:"varint,2,rep,packed,name=options,proto3" json:"options,omitempty"`
	Price         uint32        `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	PaymentMethod PaymentMethod `protobuf:"varint,4,opt,name=payment_method,json=paymentMethod,proto3,enum=PaymentMethod" json:"payment_method,omitempty"`
	CreditBills   uint32        `protobuf:"varint,5,opt,name=credit_bills,json=creditBills,proto3" json:"credit_bills,omitempty"`
	CreditCoins   uint32        `protobuf:"varint,6,opt,name=credit_coins,json=creditCoins,proto3" json:"credit_coins,omitempty"`
	Spent         *Inventory    `protobuf:"bytes,7,opt,name=spent,proto3" json:"spent,omitempty"`
	Executer      int64         `protobuf:"varint,8,opt,name=executer,proto3" json:"executer,omitempty"`
}

func (x *Telemetry_Transaction) Reset() {
	*x = Telemetry_Transaction{}
	mi := &file_tele_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Telemetry_Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Telemetry_Transaction) ProtoMessage() {}

func (x *Telemetry_Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_tele_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Telemetry_Transaction.ProtoReflect.Descriptor instead.
func (*Telemetry_Transaction) Descriptor() ([]byte, []int) {
	return file_tele_proto_rawDescGZIP(), []int{1, 2}
}

func (x *Telemetry_Transaction) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Telemetry_Transaction) GetOptions() []int32 {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Telemetry_Transaction) GetPrice() uint32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Telemetry_Transaction) GetPaymentMethod() PaymentMethod {
	if x != nil {
		return x.PaymentMethod
	}
	return PaymentMethod_Nothing
}

func (x *Telemetry_Transaction) GetCreditBills() uint32 {
	if x != nil {
		return x.CreditBills
	}
	return 0
}

func (x *Telemetry_Transaction) GetCreditCoins() uint32 {
	if x != nil {
		return x.CreditCoins
	}
	return 0
}

func (x *Telemetry_Transaction) GetSpent() *Inventory {
	if x != nil {
		return x.Spent
	}
	return nil
}

func (x *Telemetry_Transaction) GetExecuter() int64 {
	if x != nil {
		return x.Executer
	}
	return 0
}

type Telemetry_Stat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity     uint32            `protobuf:"varint,1,opt,name=activity,proto3" json:"activity,omitempty"`
	BillRejected map[uint32]uint32 `protobuf:"bytes,16,rep,name=bill_rejected,json=billRejected,proto3" json:"bill_rejected,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CoinRejected map[uint32]uint32 `protobuf:"bytes,17,rep,name=coin_rejected,json=coinRejected,proto3" json:"coin_rejected,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CoinSlug     uint32            `protobuf:"varint,18,opt,name=coin_slug,json=coinSlug,proto3" json:"coin_slug,omitempty"`
}

func (x *Telemetry_Stat) Reset() {
	*x = Telemetry_Stat{}
	mi := &file_tele_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Telemetry_Stat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Telemetry_Stat) ProtoMessage() {}

func (x *Telemetry_Stat) ProtoReflect() protoreflect.Message {
	mi := &file_tele_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Telemetry_Stat.ProtoReflect.Descriptor instead.
func (*Telemetry_Stat) Descriptor() ([]byte, []int) {
	return file_tele_proto_rawDescGZIP(), []int{1, 3}
}

func (x *Telemetry_Stat) GetActivity() uint32 {
	if x != nil {
		return x.Activity
	}
	return 0
}

func (x *Telemetry_Stat) GetBillRejected() map[uint32]uint32 {
	if x != nil {
		return x.BillRejected
	}
	return nil
}

func (x *Telemetry_Stat) GetCoinRejected() map[uint32]uint32 {
	if x != nil {
		return x.CoinRejected
	}
	return nil
}

func (x *Telemetry_Stat) GetCoinSlug() uint32 {
	if x != nil {
		return x.CoinSlug
	}
	return 0
}

type Command_ArgReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Command_ArgReport) Reset() {
	*x = Command_ArgReport{}
	mi := &file_tele_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Command_ArgReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command_ArgReport) ProtoMessage() {}

func (x *Command_ArgReport) ProtoReflect() protoreflect.Message {
	mi := &file_tele_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command_ArgReport.ProtoReflect.Descriptor instead.
func (*Command_ArgReport) Descriptor() ([]byte, []int) {
	return file_tele_proto_rawDescGZIP(), []int{2, 0}
}

type Command_ArgGetState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Command_ArgGetState) Reset() {
	*x = Command_ArgGetState{}
	mi := &file_tele_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Command_ArgGetState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command_ArgGetState) ProtoMessage() {}

func (x *Command_ArgGetState) ProtoReflect() protoreflect.Message {
	mi := &file_tele_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command_ArgGetState.ProtoReflect.Descriptor instead.
func (*Command_ArgGetState) Descriptor() ([]byte, []int) {
	return file_tele_proto_rawDescGZIP(), []int{2, 1}
}

type Command_ArgExec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scenario string `protobuf:"bytes,1,opt,name=scenario,proto3" json:"scenario,omitempty"`
}

func (x *Command_ArgExec) Reset() {
	*x = Command_ArgExec{}
	mi := &file_tele_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Command_ArgExec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command_ArgExec) ProtoMessage() {}

func (x *Command_ArgExec) ProtoReflect() protoreflect.Message {
	mi := &file_tele_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command_ArgExec.ProtoReflect.Descriptor instead.
func (*Command_ArgExec) Descriptor() ([]byte, []int) {
	return file_tele_proto_rawDescGZIP(), []int{2, 2}
}

func (x *Command_ArgExec) GetScenario() string {
	if x != nil {
		return x.Scenario
	}
	return ""
}

type Command_ArgSetInventory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	New *Inventory `protobuf:"bytes,1,opt,name=new,proto3" json:"new,omitempty"`
}

func (x *Command_ArgSetInventory) Reset() {
	*x = Command_ArgSetInventory{}
	mi := &file_tele_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Command_ArgSetInventory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command_ArgSetInventory) ProtoMessage() {}

func (x *Command_ArgSetInventory) ProtoReflect() protoreflect.Message {
	mi := &file_tele_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command_ArgSetInventory.ProtoReflect.Descriptor instead.
func (*Command_ArgSetInventory) Descriptor() ([]byte, []int) {
	return file_tele_proto_rawDescGZIP(), []int{2, 3}
}

func (x *Command_ArgSetInventory) GetNew() *Inventory {
	if x != nil {
		return x.New
	}
	return nil
}

type Command_ArgSetConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	New  []byte `protobuf:"bytes,2,opt,name=new,proto3" json:"new,omitempty"`
}

func (x *Command_ArgSetConfig) Reset() {
	*x = Command_ArgSetConfig{}
	mi := &file_tele_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Command_ArgSetConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command_ArgSetConfig) ProtoMessage() {}

func (x *Command_ArgSetConfig) ProtoReflect() protoreflect.Message {
	mi := &file_tele_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command_ArgSetConfig.ProtoReflect.Descriptor instead.
func (*Command_ArgSetConfig) Descriptor() ([]byte, []int) {
	return file_tele_proto_rawDescGZIP(), []int{2, 4}
}

func (x *Command_ArgSetConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Command_ArgSetConfig) GetNew() []byte {
	if x != nil {
		return x.New
	}
	return nil
}

type Command_ArgSendStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Command_ArgSendStatus) Reset() {
	*x = Command_ArgSendStatus{}
	mi := &file_tele_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Command_ArgSendStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command_ArgSendStatus) ProtoMessage() {}

func (x *Command_ArgSendStatus) ProtoReflect() protoreflect.Message {
	mi := &file_tele_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command_ArgSendStatus.ProtoReflect.Descriptor instead.
func (*Command_ArgSendStatus) Descriptor() ([]byte, []int) {
	return file_tele_proto_rawDescGZIP(), []int{2, 5}
}

type Command_ArgShowQR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Layout string `protobuf:"bytes,1,opt,name=layout,proto3" json:"layout,omitempty"`
	QrText string `protobuf:"bytes,2,opt,name=qr_text,json=qrText,proto3" json:"qr_text,omitempty"`
}

func (x *Command_ArgShowQR) Reset() {
	*x = Command_ArgShowQR{}
	mi := &file_tele_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Command_ArgShowQR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command_ArgShowQR) ProtoMessage() {}

func (x *Command_ArgShowQR) ProtoReflect() protoreflect.Message {
	mi := &file_tele_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command_ArgShowQR.ProtoReflect.Descriptor instead.
func (*Command_ArgShowQR) Descriptor() ([]byte, []int) {
	return file_tele_proto_rawDescGZIP(), []int{2, 6}
}

func (x *Command_ArgShowQR) GetLayout() string {
	if x != nil {
		return x.Layout
	}
	return ""
}

func (x *Command_ArgShowQR) GetQrText() string {
	if x != nil {
		return x.QrText
	}
	return ""
}

type Command_ArgValidateCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *Command_ArgValidateCode) Reset() {
	*x = Command_ArgValidateCode{}
	mi := &file_tele_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Command_ArgValidateCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command_ArgValidateCode) ProtoMessage() {}

func (x *Command_ArgValidateCode) ProtoReflect() protoreflect.Message {
	mi := &file_tele_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command_ArgValidateCode.ProtoReflect.Descriptor instead.
func (*Command_ArgValidateCode) Descriptor() ([]byte, []int) {
	return file_tele_proto_rawDescGZIP(), []int{2, 7}
}

func (x *Command_ArgValidateCode) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type Command_ArgCook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Menucode      string        `protobuf:"bytes,1,opt,name=menucode,proto3" json:"menucode,omitempty"`
	Cream         []byte        `protobuf:"bytes,2,opt,name=cream,proto3" json:"cream,omitempty"`
	Sugar         []byte        `protobuf:"bytes,3,opt,name=sugar,proto3" json:"sugar,omitempty"`
	Balance       int32         `protobuf:"varint,4,opt,name=balance,proto3" json:"balance,omitempty"`
	PaymentMethod PaymentMethod `protobuf:"varint,5,opt,name=payment_method,json=paymentMethod,proto3,enum=PaymentMethod" json:"payment_method,omitempty"`
}

func (x *Command_ArgCook) Reset() {
	*x = Command_ArgCook{}
	mi := &file_tele_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Command_ArgCook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command_ArgCook) ProtoMessage() {}

func (x *Command_ArgCook) ProtoReflect() protoreflect.Message {
	mi := &file_tele_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command_ArgCook.ProtoReflect.Descriptor instead.
func (*Command_ArgCook) Descriptor() ([]byte, []int) {
	return file_tele_proto_rawDescGZIP(), []int{2, 8}
}

func (x *Command_ArgCook) GetMenucode() string {
	if x != nil {
		return x.Menucode
	}
	return ""
}

func (x *Command_ArgCook) GetCream() []byte {
	if x != nil {
		return x.Cream
	}
	return nil
}

func (x *Command_ArgCook) GetSugar() []byte {
	if x != nil {
		return x.Sugar
	}
	return nil
}

func (x *Command_ArgCook) GetBalance() int32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *Command_ArgCook) GetPaymentMethod() PaymentMethod {
	if x != nil {
		return x.PaymentMethod
	}
	return PaymentMethod_Nothing
}

type Stock_StockItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Value int32  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Stock_StockItem) Reset() {
	*x = Stock_StockItem{}
	mi := &file_tele_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Stock_StockItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stock_StockItem) ProtoMessage() {}

func (x *Stock_StockItem) ProtoReflect() protoreflect.Message {
	mi := &file_tele_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stock_StockItem.ProtoReflect.Descriptor instead.
func (*Stock_StockItem) Descriptor() ([]byte, []int) {
	return file_tele_proto_rawDescGZIP(), []int{5, 0}
}

func (x *Stock_StockItem) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Stock_StockItem) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

var File_tele_proto protoreflect.FileDescriptor

var file_tele_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x65, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb4, 0x01, 0x0a,
	0x09, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x06, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x1a, 0x79, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x70, 0x70, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x6f, 0x70, 0x70, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x66, 0x22, 0xf7, 0x0a, 0x0a, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x12, 0x13, 0x0a, 0x05, 0x76, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x76, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x28, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x0d,
	0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x78, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0c, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x43, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x78, 0x12, 0x38, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x04, 0x73, 0x74, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x54, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x04, 0x73, 0x74,
	0x61, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x73, 0x61, 0x76, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x53,
	0x61, 0x76, 0x65, 0x12, 0x33, 0x0a, 0x0c, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0b, 0x6d, 0x6f, 0x6e,
	0x65, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x4b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xa3, 0x02, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x73,
	0x12, 0x31, 0x0a, 0x05, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x62, 0x69,
	0x6c, 0x6c, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x38, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x8c, 0x02, 0x0a, 0x0b, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x35,
	0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f,
	0x62, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x05, 0x73,
	0x70, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x05, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x72, 0x1a, 0xd1, 0x02, 0x0a, 0x04, 0x53, 0x74,
	0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x46,
	0x0a, 0x0d, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x62, 0x69, 0x6c, 0x6c, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x0d, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0c, 0x63, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x6c, 0x75, 0x67, 0x1a, 0x3f, 0x0a, 0x11, 0x42,
	0x69, 0x6c, 0x6c, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11,
	0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcf, 0x07,
	0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x41, 0x72, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52,
	0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x41, 0x72, 0x67, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x65,
	0x78, 0x65, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x41, 0x72, 0x67, 0x45, 0x78, 0x65, 0x63, 0x48, 0x00, 0x52, 0x04, 0x65,
	0x78, 0x65, 0x63, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x41, 0x72, 0x67, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x41, 0x72, 0x67, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x09, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x0a, 0x04,
	0x73, 0x74, 0x6f, 0x70, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x41, 0x72, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x48, 0x00, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x2d, 0x0a, 0x07, 0x73, 0x68,
	0x6f, 0x77, 0x5f, 0x51, 0x52, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x41, 0x72, 0x67, 0x53, 0x68, 0x6f, 0x77, 0x51, 0x52, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x77, 0x51, 0x52, 0x12, 0x3f, 0x0a, 0x0d, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x41, 0x72, 0x67, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x63, 0x6f,
	0x6f, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x41, 0x72, 0x67, 0x43, 0x6f, 0x6f, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f,
	0x6f, 0x6b, 0x1a, 0x0b, 0x0a, 0x09, 0x41, 0x72, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x1a,
	0x0d, 0x0a, 0x0b, 0x41, 0x72, 0x67, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x25,
	0x0a, 0x07, 0x41, 0x72, 0x67, 0x45, 0x78, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x65,
	0x6e, 0x61, 0x72, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x65,
	0x6e, 0x61, 0x72, 0x69, 0x6f, 0x1a, 0x2f, 0x0a, 0x0f, 0x41, 0x72, 0x67, 0x53, 0x65, 0x74, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x03, 0x6e, 0x65, 0x77, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x03, 0x6e, 0x65, 0x77, 0x1a, 0x34, 0x0a, 0x0c, 0x41, 0x72, 0x67, 0x53, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x65,
	0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6e, 0x65, 0x77, 0x1a, 0x0f, 0x0a, 0x0d,
	0x41, 0x72, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x3c, 0x0a,
	0x09, 0x41, 0x72, 0x67, 0x53, 0x68, 0x6f, 0x77, 0x51, 0x52, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x71, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x72, 0x54, 0x65, 0x78, 0x74, 0x1a, 0x25, 0x0a, 0x0f, 0x41,
	0x72, 0x67, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x1a, 0xa2, 0x01, 0x0a, 0x07, 0x41, 0x72, 0x67, 0x43, 0x6f, 0x6f, 0x6b, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x72,
	0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x75, 0x67, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x73, 0x75, 0x67, 0x61, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x35, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22,
	0xf9, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x72, 0x12, 0x29, 0x0a, 0x0a, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x43, 0x6d, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x52, 0x09, 0x63, 0x6d, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x2c, 0x0a,
	0x0b, 0x63, 0x6f, 0x6f, 0x6b, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x43, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x52,
	0x0a, 0x63, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x80, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x22, 0xd2, 0x01, 0x0a, 0x0f,
	0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x62, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x06,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x6f, 0x62, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x72, 0x6f, 0x62, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x05, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x45, 0x72, 0x72, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12,
	0x31, 0x0a, 0x0c, 0x52, 0x6f, 0x62, 0x6f, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x52, 0x0c, 0x52, 0x6f, 0x62, 0x6f, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x12, 0x1c, 0x0a, 0x05, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x06, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x22, 0x68, 0x0a, 0x05, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x73, 0x1a, 0x35, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x33, 0x0a, 0x03, 0x45, 0x72,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x96, 0x02, 0x0a, 0x06, 0x53, 0x68, 0x6f, 0x77, 0x51, 0x52, 0x12, 0x26, 0x0a, 0x06, 0x71, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x53, 0x68, 0x6f,
	0x77, 0x51, 0x52, 0x2e, 0x51, 0x52, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x71, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x71, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x74, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4c, 0x0a, 0x06, 0x51, 0x52,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x10, 0x03, 0x12, 0x09, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x04, 0x22, 0xb0, 0x01, 0x0a, 0x0d, 0x54, 0x6f, 0x52,
	0x6f, 0x62, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x6d, 0x61,
	0x6b, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x09, 0x6d, 0x61, 0x6b, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x06, 0x73, 0x68, 0x6f, 0x77, 0x51, 0x52, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x07, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x51, 0x52, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x77, 0x51,
	0x52, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x4e, 0x0a, 0x0c, 0x52,
	0x6f, 0x62, 0x6f, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53,
	0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x53, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xd9, 0x02, 0x0a, 0x05,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x63, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x75, 0x67, 0x61, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x75, 0x67, 0x61, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0d, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x53, 0x74, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x53, 0x74, 0x72, 0x12, 0x28, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x2a, 0x45, 0x0a, 0x09, 0x43, 0x6d, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x6e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x62, 0x75, 0x73,
	0x79, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x04, 0x2a, 0x8e,
	0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x0f, 0x0a,
	0x0b, 0x63, 0x6f, 0x6f, 0x6b, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x63, 0x6f, 0x6f, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6f, 0x6b, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x63, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x63, 0x6f, 0x6f, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x64,
	0x72, 0x61, 0x66, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x63, 0x6f, 0x6f, 0x6b, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x76, 0x6d, 0x63, 0x62, 0x75, 0x73, 0x79,
	0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x77, 0x61, 0x69, 0x74, 0x50, 0x61, 0x79, 0x10, 0x07, 0x2a,
	0xd1, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x6f, 0x6f, 0x74, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x6e, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x6f, 0x63, 0x6b, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x10,
	0x08, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x10, 0x09, 0x12,
	0x11, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x10, 0x0a, 0x12, 0x1d, 0x0a, 0x19, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x10,
	0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x10, 0x40, 0x2a, 0x4b, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x61, 0x73, 0x68, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43,
	0x61, 0x73, 0x68, 0x6c, 0x65, 0x73, 0x73, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x69, 0x66,
	0x74, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x04,
	0x2a, 0x42, 0x0a, 0x09, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a,
	0x0b, 0x6e, 0x6f, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x71, 0x72, 0x43, 0x61, 0x73, 0x68, 0x4c, 0x65, 0x73, 0x73, 0x55, 0x73,
	0x65, 0x72, 0x10, 0x02, 0x2a, 0xce, 0x01, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x6e, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66,
	0x74, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x10, 0x04, 0x12, 0x0e,
	0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x05, 0x12, 0x0f,
	0x0a, 0x0b, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x49, 0x73, 0x42, 0x75, 0x73, 0x79, 0x10, 0x06, 0x12,
	0x15, 0x0a, 0x11, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x64, 0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x10, 0x40, 0x12, 0x11, 0x0a, 0x0d, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x10, 0x41, 0x2a, 0x6b, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x68, 0x6f, 0x77, 0x51, 0x52, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x6d, 0x61, 0x6b, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x10, 0x03,
	0x12, 0x0f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x10,
	0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x10, 0x05, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tele_proto_rawDescOnce sync.Once
	file_tele_proto_rawDescData = file_tele_proto_rawDesc
)

func file_tele_proto_rawDescGZIP() []byte {
	file_tele_proto_rawDescOnce.Do(func() {
		file_tele_proto_rawDescData = protoimpl.X.CompressGZIP(file_tele_proto_rawDescData)
	})
	return file_tele_proto_rawDescData
}

var file_tele_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_tele_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_tele_proto_goTypes = []any{
	(CmdReplay)(0),                  // 0: CmdReplay
	(CookReplay)(0),                 // 1: CookReplay
	(State)(0),                      // 2: State
	(PaymentMethod)(0),              // 3: PaymentMethod
	(OwnerType)(0),                  // 4: OwnerType
	(OrderStatus)(0),                // 5: OrderStatus
	(MessageType)(0),                // 6: MessageType
	(ShowQR_QRType)(0),              // 7: ShowQR.QRType
	(*Inventory)(nil),               // 8: Inventory
	(*Telemetry)(nil),               // 9: Telemetry
	(*Command)(nil),                 // 10: Command
	(*Response)(nil),                // 11: Response
	(*FromRoboMessage)(nil),         // 12: FromRoboMessage
	(*Stock)(nil),                   // 13: Stock
	(*Err)(nil),                     // 14: Err
	(*ShowQR)(nil),                  // 15: ShowQR
	(*ToRoboMessage)(nil),           // 16: ToRoboMessage
	(*RoboHardware)(nil),            // 17: RoboHardware
	(*Order)(nil),                   // 18: Order
	(*Inventory_StockItem)(nil),     // 19: Inventory.StockItem
	(*Telemetry_Error)(nil),         // 20: Telemetry.Error
	(*Telemetry_Money)(nil),         // 21: Telemetry.Money
	(*Telemetry_Transaction)(nil),   // 22: Telemetry.Transaction
	(*Telemetry_Stat)(nil),          // 23: Telemetry.Stat
	nil,                             // 24: Telemetry.Money.BillsEntry
	nil,                             // 25: Telemetry.Money.CoinsEntry
	nil,                             // 26: Telemetry.Stat.BillRejectedEntry
	nil,                             // 27: Telemetry.Stat.CoinRejectedEntry
	(*Command_ArgReport)(nil),       // 28: Command.ArgReport
	(*Command_ArgGetState)(nil),     // 29: Command.ArgGetState
	(*Command_ArgExec)(nil),         // 30: Command.ArgExec
	(*Command_ArgSetInventory)(nil), // 31: Command.ArgSetInventory
	(*Command_ArgSetConfig)(nil),    // 32: Command.ArgSetConfig
	(*Command_ArgSendStatus)(nil),   // 33: Command.ArgSendStatus
	(*Command_ArgShowQR)(nil),       // 34: Command.ArgShowQR
	(*Command_ArgValidateCode)(nil), // 35: Command.ArgValidateCode
	(*Command_ArgCook)(nil),         // 36: Command.ArgCook
	(*Stock_StockItem)(nil),         // 37: Stock.StockItem
}
var file_tele_proto_depIdxs = []int32{
	19, // 0: Inventory.stocks:type_name -> Inventory.StockItem
	20, // 1: Telemetry.error:type_name -> Telemetry.Error
	8,  // 2: Telemetry.inventory:type_name -> Inventory
	21, // 3: Telemetry.money_cashbox:type_name -> Telemetry.Money
	22, // 4: Telemetry.transaction:type_name -> Telemetry.Transaction
	23, // 5: Telemetry.stat:type_name -> Telemetry.Stat
	21, // 6: Telemetry.money_save:type_name -> Telemetry.Money
	21, // 7: Telemetry.money_change:type_name -> Telemetry.Money
	28, // 8: Command.report:type_name -> Command.ArgReport
	29, // 9: Command.getState:type_name -> Command.ArgGetState
	30, // 10: Command.exec:type_name -> Command.ArgExec
	31, // 11: Command.set_inventory:type_name -> Command.ArgSetInventory
	32, // 12: Command.set_config:type_name -> Command.ArgSetConfig
	33, // 13: Command.stop:type_name -> Command.ArgSendStatus
	34, // 14: Command.show_QR:type_name -> Command.ArgShowQR
	35, // 15: Command.validate_code:type_name -> Command.ArgValidateCode
	36, // 16: Command.cook:type_name -> Command.ArgCook
	0,  // 17: Response.cmd_replay:type_name -> CmdReplay
	1,  // 18: Response.cook_replay:type_name -> CookReplay
	2,  // 19: FromRoboMessage.state:type_name -> State
	18, // 20: FromRoboMessage.Order:type_name -> Order
	14, // 21: FromRoboMessage.err:type_name -> Err
	17, // 22: FromRoboMessage.RoboHardware:type_name -> RoboHardware
	13, // 23: FromRoboMessage.Stock:type_name -> Stock
	37, // 24: Stock.stocks:type_name -> Stock.StockItem
	7,  // 25: ShowQR.qrType:type_name -> ShowQR.QRType
	6,  // 26: ToRoboMessage.cmd:type_name -> MessageType
	18, // 27: ToRoboMessage.makeOrder:type_name -> Order
	15, // 28: ToRoboMessage.showQR:type_name -> ShowQR
	5,  // 29: Order.orderStatus:type_name -> OrderStatus
	3,  // 30: Order.paymentMethod:type_name -> PaymentMethod
	4,  // 31: Order.ownerType:type_name -> OwnerType
	24, // 32: Telemetry.Money.bills:type_name -> Telemetry.Money.BillsEntry
	25, // 33: Telemetry.Money.coins:type_name -> Telemetry.Money.CoinsEntry
	3,  // 34: Telemetry.Transaction.payment_method:type_name -> PaymentMethod
	8,  // 35: Telemetry.Transaction.spent:type_name -> Inventory
	26, // 36: Telemetry.Stat.bill_rejected:type_name -> Telemetry.Stat.BillRejectedEntry
	27, // 37: Telemetry.Stat.coin_rejected:type_name -> Telemetry.Stat.CoinRejectedEntry
	8,  // 38: Command.ArgSetInventory.new:type_name -> Inventory
	3,  // 39: Command.ArgCook.payment_method:type_name -> PaymentMethod
	40, // [40:40] is the sub-list for method output_type
	40, // [40:40] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_tele_proto_init() }
func file_tele_proto_init() {
	if File_tele_proto != nil {
		return
	}
	file_tele_proto_msgTypes[2].OneofWrappers = []any{
		(*Command_Report)(nil),
		(*Command_GetState)(nil),
		(*Command_Exec)(nil),
		(*Command_SetInventory)(nil),
		(*Command_SetConfig)(nil),
		(*Command_Stop)(nil),
		(*Command_Show_QR)(nil),
		(*Command_ValidateCode)(nil),
		(*Command_Cook)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tele_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tele_proto_goTypes,
		DependencyIndexes: file_tele_proto_depIdxs,
		EnumInfos:         file_tele_proto_enumTypes,
		MessageInfos:      file_tele_proto_msgTypes,
	}.Build()
	File_tele_proto = out.File
	file_tele_proto_rawDesc = nil
	file_tele_proto_goTypes = nil
	file_tele_proto_depIdxs = nil
}
