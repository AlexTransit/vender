syntax = "proto3";
package tele;

message Inventory {
  repeated StockItem stocks = 1;
  message StockItem {
    uint32 code = 1;
    int32 value = 2;
    string name = 3;
    int32 hopper = 4;
    float valuef = 5;
  }
}

enum Priority {
  Default = 0;
  Now = 1;
  IdleEngine = 2;
  IdleUser = 4;
}

message Telemetry {
  int32 vm_id = 1;
  int64 time = 2;
  Error error = 3;
  Inventory inventory = 4;
  Money money_cashbox = 5;
  Transaction transaction = 6;
  Stat stat = 7;
  Money money_save = 8;
  Money money_change = 9;
  bool at_service = 16;
//  string build_version = 17;

  message Error {
    uint32 code = 1;
    string message = 2;
    uint32 count = 3;
  }

  message Money {
    uint32 total_bills = 1;
    uint32 total_coins = 2;
    map<uint32, uint32> bills = 3;
    map<uint32, uint32> coins = 4;
  }

  message Transaction {
    string code = 1;
    repeated int32 options = 2;
    uint32 price = 3;
    PaymentMethod payment_method = 4;
    uint32 credit_bills = 5;
    uint32 credit_coins = 6;
    Inventory spent = 7;
    int64 executer = 8;
  }

  message Stat {
    uint32 activity = 1;
    map<uint32, uint32> bill_rejected = 16;
    map<uint32, uint32> coin_rejected = 17;
    uint32 coin_slug = 18;
  }
}

message Command {
  int64 executer = 5;
  bool lock = 6;
  oneof task {
    ArgReport report = 16;
    ArgGetState getState = 17;
    ArgExec exec = 18;
    ArgSetInventory set_inventory = 19;
    ArgSetConfig set_config = 20;
    ArgSendStatus stop = 21;
    ArgShowQR show_QR = 22;
    ArgValidateCode validate_code = 23;
    ArgCook cook = 24;
  }
  
  message ArgReport {}
  message ArgGetState {}
  message ArgExec {
    string scenario = 1;
  }
  message ArgSetInventory { Inventory new = 1; }
  message ArgSetConfig {
    string name = 1;
    bytes new = 2;
  }
  message ArgSendStatus { }
  message ArgShowQR {
    string layout = 1;
    string qr_text = 2;
  }
  message ArgValidateCode {string code = 1; }
  message ArgCook {
    string menucode  = 1;
    bytes cream = 2;
    bytes sugar = 3;
    int32 balance = 4;
    PaymentMethod payment_method = 5;
  }
}

enum CmdReplay {
  nothing = 0;
  accepted = 1;
  done = 2;
  busy = 3;
  error = 4;
}

enum CookReplay {
  cookNothing = 0;
  cookStart = 1;
  cookFinish = 2;
  cookInaccessible = 3;
  cookOverdraft = 4;
  cookError = 5;
  vmcbusy = 6;
  waitPay = 7;
}

message Response {
  // uint32 command_id = 1;
  string error = 2;
  string data = 3;
  int64 executer = 4;
  CmdReplay cmd_replay = 5;
  CookReplay cook_replay = 6;
  uint32 validateReplay = 7;
  string INTERNAL_topic = 2048; // convenience
}

message WaitingForRemotePayment {
  string menucode  = 1;
  bytes cream = 2;
  bytes sugar = 3;
  uint32 amount = 4;
}

// ----------
enum State {
  Invalid = 0;
  Boot = 1;
  Nominal = 2;
  Disconnected = 3;
  Broken = 4;
  Service = 5;
  Lock = 6;
  Process = 7;
  TemperatureProblem = 8;
  Shutdown = 9;
  RemoteControl = 10;
  WaitingForExternalPayment = 11;
  
  RequestState = 64;
}

enum PaymentMethod {
  Nothing = 0;
  Cash = 1;
  Cashless = 2;
  Gift = 3;
  Balance = 4;
}

enum OwnerType {
  noOwnerType = 0;
  telegramUser = 1;
  qrCashLessUser = 2;
}

enum OrderStatus {
  noStatus = 0;
  executionStart = 1;
  complete = 2;
  overdraft = 3;
  executionInaccessible = 4;
  orderError = 5;
  robotIsBusy = 6;
  waitingForPayment = 7;

  doSelected = 64;
  doTransferred = 65;
}

message FromRoboMessage {
  State state = 1;
  int64 roboTime = 2;
  Order Order = 3;
  Err err = 4;
  RobotState RoboState = 5;
}

message Err {
  uint32 code = 1;
  string message = 2;
}

message ShowQR {
  enum QRType {
    error = 0;
    showQRReceipt = 1;
    showQROrder = 2;
    errorQROrderOverdraft = 3;
    errorQR = 4;
  }
  QRType qrType= 1;
  string qrText = 2;
  string dataStr = 3;
  int32 dataInt = 4;
}

message ToRoboMessage {
  MessageType cmd = 1;
  int64 serverTime = 2;
  Order makeOrder = 3;
  ShowQR showQR = 4;

} 
enum MessageType {
  invalid = 0;
  showQR = 1;
}
message RobotState { 
  int32 temperature = 3;
}
message Order {
  string menuCode = 1;
  bytes cream = 2;         // default = 0
  bytes sugar = 3;             // default = 0
  uint32 amount = 4;           // цена в копейках
  OrderStatus orderStatus = 6;
  PaymentMethod paymentMethod = 7;
  int64 ownerInt = 8;          // id клиента
  string ownerStr = 9;  //  
  OwnerType ownerType = 10;
  int64 redirectDueDate = 11;
}
